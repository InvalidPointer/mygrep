/*!
 * \file
 * \brief Заголовочный файл синтаксического анализатора
 * \author InvalidPointer
 *
 * Данный файл содержит в себе определение класса синтаксического анализатора
*/
#ifndef MYGREP_SYNTAXANALYZER_H
#define MYGREP_SYNTAXANALYZER_H


#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <stdexcept>

#include "token.h"

using namespace std;

/*!
 * \brief Синтаксический анализатор
 *
 * Синтаксический анализатор преобразует последовательность лексем, полученную от лексического анализатора,
 * в префиксную форму, проверяя синтаксис регулярного выражения
 */
class SyntaxAnalyzer
{
private:
    vector<token> raw_tokens;       ///< Вектор исходных лексем
    vector<token> pf_tokens;        ///< Вектор с преобразованными лексемами
    vector<token>::iterator it;     ///< Итератор, используемый для обхода вектора исходных лексем

    int brackets_count;             ///< Количество незакрытых скобок
    string buf;                     ///< Буфер, используемый для объединения подряд идущих последовательностей литералов

    ///Инициализирует анализатор
    void init();

    /*!
     * Проверяет выражение и преобразовывает его в префиксную форму
     * \param[in] last Показывает, надо ли останавливаться перед проверкой бинарной операции перечисления
     */
    void E(bool last = false);

    /*!
     * Проверяет наличие операций и добавляет их в вектор лексем
     * \param[in] pos Позиция, куда необходимо вставить операции
     *
     * \return Наличие операций
     */
    bool O(int pos = -1);

    /*!
     * Очищает буфер, занося его содержимое в вектор преобразованных лексем
     * \param[in] pos Позиция, куда необходимо вставить содержимое буфера
     *
     * \return Заполненность буфера на момент вызова
     */
    bool flush_buf(int pos = -1);
public:
    /*!
     * Конструктор синтаксического анализатора
     * \param[in] tokens Вектор лексем, подлежащий обработке
     */
    SyntaxAnalyzer(const vector<token> &tokens);
    ~SyntaxAnalyzer() {}

    /*!
     * Производит синтаксический анализ регулярного выражения
     *
     * \return Вектор из лексем, который является префиксной записью регулярного выражения
     */
    vector<token> analyze();
};


#endif //MYGREP_SYNTAXANALYZER_H
